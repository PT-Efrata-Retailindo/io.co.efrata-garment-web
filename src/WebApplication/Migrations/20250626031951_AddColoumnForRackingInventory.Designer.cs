// <auto-generated />
using System;
using DanLiris.Admin.Web;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DanLiris.Admin.Web.Migrations
{
    [DbContext(typeof(AppStorageContext))]
    [Migration("20250626031951_AddColoumnForRackingInventory")]
    partial class AddColoumnForRackingInventory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Manufactures.Domain.GarmentAdjustments.ReadModels.GarmentAdjustmentItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdjustmentId");

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("FinishedGoodStockId");

                    b.Property<Guid>("FinishingInItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(500);

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingDOItemId");

                    b.Property<Guid>("SewingInItemId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("AdjustmentId");

                    b.ToTable("GarmentAdjustmentItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAdjustments.ReadModels.GarmentAdjustmentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("AdjustmentDate");

                    b.Property<string>("AdjustmentDesc")
                        .HasMaxLength(255);

                    b.Property<string>("AdjustmentNo")
                        .HasMaxLength(25);

                    b.Property<string>("AdjustmentType")
                        .HasMaxLength(25);

                    b.Property<string>("Article")
                        .HasMaxLength(50);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(100);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("AdjustmentNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentAdjustments");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAvalComponents.ReadModels.GarmentAvalComponentItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AvalComponentId");

                    b.Property<decimal>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingInDetailId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<long>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutDetailId");

                    b.Property<Guid>("SewingOutItemId");

                    b.Property<long>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.HasKey("Identity");

                    b.HasIndex("AvalComponentId");

                    b.ToTable("GarmentAvalComponentItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAvalComponents.ReadModels.GarmentAvalComponentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(50);

                    b.Property<string>("AvalComponentNo")
                        .HasMaxLength(25);

                    b.Property<string>("AvalComponentType")
                        .HasMaxLength(25);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<long>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsReceived");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<long>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("AvalComponentNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentAvalComponents");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAvalProducts.ReadModels.GarmentAvalProductItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("APId");

                    b.Property<double>("BasicPrice");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsReceived");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PreparingId");

                    b.Property<string>("PreparingItemId");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("APId");

                    b.ToTable("GarmentAvalProductItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAvalProducts.ReadModels.GarmentAvalProductReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("AvalDate");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentAvalProducts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentComodityPrices.ReadModels.GarmentComodityPriceReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsValid");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Price");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentComodityPrices");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingAdjustments.ReadModels.GarmentCuttingAdjustmentItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualFC");

                    b.Property<decimal>("ActualQuantity");

                    b.Property<Guid>("AdjustmentCuttingId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutInDetailId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<decimal>("FC");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("PreparingItemId");

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.HasIndex("AdjustmentCuttingId");

                    b.ToTable("GarmentCuttingAdjustmentItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingAdjustments.ReadModels.GarmentCuttingAdjustmentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("AdjustmentDate");

                    b.Property<string>("AdjustmentDesc")
                        .HasMaxLength(4000);

                    b.Property<string>("AdjustmentNo")
                        .HasMaxLength(25);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutInId");

                    b.Property<string>("CutInNo")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalActualFC");

                    b.Property<decimal>("TotalActualQuantity");

                    b.Property<decimal>("TotalFC");

                    b.Property<decimal>("TotalQuantity");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("AdjustmentNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentCuttingAdjustments");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingIns.ReadModels.GarmentCuttingInDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutInItemId");

                    b.Property<int>("CuttingInQuantity");

                    b.Property<int>("CuttingInUomId");

                    b.Property<string>("CuttingInUomUnit")
                        .HasMaxLength(10);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<double>("FC");

                    b.Property<string>("FabricType")
                        .HasMaxLength(25);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("PreparingItemId");

                    b.Property<double>("PreparingQuantity");

                    b.Property<int>("PreparingUomId");

                    b.Property<string>("PreparingUomUnit")
                        .HasMaxLength(10);

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutDetailId");

                    b.Property<Guid>("SewingOutItemId");

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.HasKey("Identity");

                    b.HasIndex("CutInItemId");

                    b.ToTable("GarmentCuttingInDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingIns.ReadModels.GarmentCuttingInItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutInId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("PreparingId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutId");

                    b.Property<string>("SewingOutNo")
                        .HasMaxLength(50);

                    b.Property<int>("UENId");

                    b.Property<string>("UENNo")
                        .HasMaxLength(100);

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.HasKey("Identity");

                    b.HasIndex("CutInId");

                    b.ToTable("GarmentCuttingInItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingIns.ReadModels.GarmentCuttingInReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("CutInNo")
                        .HasMaxLength(25);

                    b.Property<string>("CuttingFrom")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("CuttingInDate");

                    b.Property<string>("CuttingType")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("FC");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("CutInNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentCuttingIns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentBalanceCuttingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<double>("CuttingQtyMeter");

                    b.Property<double>("CuttingQtyPcs");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("Expenditure");

                    b.Property<double>("Fc");

                    b.Property<double>("Hours");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Nominal");

                    b.Property<decimal>("Price");

                    b.Property<double>("QtyOrder");

                    b.Property<double>("RemainQty");

                    b.Property<string>("RoJob")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("Stock");

                    b.Property<string>("Style")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode");

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName");

                    b.HasKey("Identity");

                    b.ToTable("GarmentBalanceCuttings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentCuttingOutDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutOutItemId");

                    b.Property<double>("CuttingOutQuantity");

                    b.Property<int>("CuttingOutUomId");

                    b.Property<string>("CuttingOutUomUnit")
                        .HasMaxLength(10);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("RemainingQuantity");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.HasKey("Identity");

                    b.HasIndex("CutOutItemId");

                    b.ToTable("GarmentCuttingOutDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentCuttingOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutOutId");

                    b.Property<Guid>("CuttingInDetailId");

                    b.Property<Guid>("CuttingInId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("TotalCuttingOut");

                    b.Property<string>("UId");

                    b.HasKey("Identity");

                    b.HasIndex("CutOutId");

                    b.ToTable("GarmentCuttingOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentCuttingOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("CutOutNo")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("CuttingOutDate");

                    b.Property<string>("CuttingOutType")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<long>("EPOId");

                    b.Property<long>("EPOItemId");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("POSerialNumber")
                        .HasMaxLength(100);

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("CutOutNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentCuttingOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentDeliveryReturns.ReadModels.GarmentDeliveryReturnItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Box");

                    b.Property<string>("Colour");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DRId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("Level");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PreparingItemId");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<string>("Rack");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UENItemId");

                    b.Property<string>("UId");

                    b.Property<int>("UnitDOItemId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("DRId");

                    b.ToTable("GarmentDeliveryReturnItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentDeliveryReturns.ReadModels.GarmentDeliveryReturnReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("DRNo")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PreparingId");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("ReturnDate");

                    b.Property<string>("ReturnType")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("StorageCode")
                        .HasMaxLength(25);

                    b.Property<int>("StorageId");

                    b.Property<string>("StorageName")
                        .HasMaxLength(100);

                    b.Property<int>("UENId");

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitDOId");

                    b.Property<string>("UnitDONo")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("DRNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentDeliveryReturns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentExpenditureGoodReturns.ReadModels.GarmentExpenditureGoodReturnItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<Guid>("ExpenditureGoodId");

                    b.Property<Guid>("ExpenditureGoodItemId");

                    b.Property<Guid>("FinishedGoodStockId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.Property<Guid>("ReturId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("ReturId");

                    b.ToTable("GarmentExpenditureGoodReturnItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentExpenditureGoodReturns.ReadModels.GarmentExpenditureGoodReturnReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(50);

                    b.Property<string>("BCNo")
                        .HasMaxLength(50);

                    b.Property<string>("BCType")
                        .HasMaxLength(50);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("ContractNo");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("DONo")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ExpenditureNo")
                        .HasMaxLength(50);

                    b.Property<string>("Invoice")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("ReturDate");

                    b.Property<string>("ReturDesc")
                        .HasMaxLength(500);

                    b.Property<string>("ReturNo")
                        .HasMaxLength(25);

                    b.Property<string>("ReturType")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("URNNo")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("ReturNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentExpenditureGoodReturns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentExpenditureGoods.ReadModels.GarmentExpenditureGoodInvoiceRelationReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("ExpenditureGoodId");

                    b.Property<string>("ExpenditureGoodNo")
                        .HasMaxLength(25);

                    b.Property<int>("InvoiceId");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("PackingListId");

                    b.Property<double>("Qty");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("ExpenditureGoodNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentExpenditureGoodInvoiceRelations");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentExpenditureGoods.ReadModels.GarmentExpenditureGoodItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("ExpenditureGoodId");

                    b.Property<Guid>("FinishedGoodStockId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.Property<double>("ReturQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("ExpenditureGoodId");

                    b.ToTable("GarmentExpenditureGoodItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentExpenditureGoods.ReadModels.GarmentExpenditureGoodReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100);

                    b.Property<double>("Carton");

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("ContractNo");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("ExpenditureDate");

                    b.Property<string>("ExpenditureGoodNo")
                        .HasMaxLength(25);

                    b.Property<string>("ExpenditureType")
                        .HasMaxLength(25);

                    b.Property<string>("Invoice")
                        .HasMaxLength(50);

                    b.Property<bool>("IsReceived");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("PackingListId");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("ExpenditureGoodNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentExpenditureGoods");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishedGoodStocks.ReadModels.GarmentFinishedGoodStockHistoryReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdjustmentId");

                    b.Property<Guid>("AdjustmentItemId");

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<double>("BasicPrice");

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("ExpenditureGoodId");

                    b.Property<Guid>("ExpenditureGoodItemId");

                    b.Property<Guid>("ExpenditureGoodReturnId");

                    b.Property<Guid>("ExpenditureGoodReturnItemId");

                    b.Property<Guid>("FinishedGoodStockId");

                    b.Property<Guid>("FinishingOutDetailId");

                    b.Property<Guid>("FinishingOutItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("StockType")
                        .HasMaxLength(50);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentFinishedGoodStockHistories");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishedGoodStocks.ReadModels.GarmentFinishedGoodStockReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<double>("BasicPrice");

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("FinishedGoodStockNo")
                        .HasMaxLength(25);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("FinishedGoodStockNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentFinishedGoodStocks");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingIns.ReadModels.GarmentFinishingInItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<long>("DODetailId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("FinishingInId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutDetailId");

                    b.Property<Guid>("SewingOutItemId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<Guid>("SubconCuttingId");

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingInId");

                    b.ToTable("GarmentFinishingInItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingIns.ReadModels.GarmentFinishingInReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<long>("DOId");

                    b.Property<string>("DONo")
                        .HasMaxLength(100);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("FinishingInDate");

                    b.Property<string>("FinishingInNo")
                        .HasMaxLength(25);

                    b.Property<string>("FinishingInType");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SubconType")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingInNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentFinishingIns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentBalanceFinishingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("FinishingQty");

                    b.Property<double>("Hours");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Nominal");

                    b.Property<decimal>("Price");

                    b.Property<double>("QtyOrder");

                    b.Property<double>("RemainQty");

                    b.Property<string>("RoJob")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("SewingQtyPcs");

                    b.Property<double>("Stock");

                    b.Property<string>("Style")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode");

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.ToTable("GarmentBalanceFinishings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentFinishingOutDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("FinishingOutItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingOutItemId");

                    b.ToTable("GarmentFinishingOutDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentFinishingOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("FinishingInId");

                    b.Property<Guid>("FinishingInItemId");

                    b.Property<Guid>("FinishingOutId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingOutId");

                    b.ToTable("GarmentFinishingOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentFinishingOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("FinishingOutDate");

                    b.Property<string>("FinishingOutNo")
                        .HasMaxLength(25);

                    b.Property<string>("FinishingTo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDifferentSize");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<string>("UnitToCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitToId");

                    b.Property<string>("UnitToName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingOutNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentFinishingOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentMonitoringFinishingReportReadModel", b =>
                {
                    b.Property<string>("RoJob")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25);

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("FinishingQtyPcs");

                    b.Property<Guid>("Identity");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("RemainQty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("SewingQtyPcs");

                    b.Property<double>("Stock");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("RoJob");

                    b.ToTable("GarmentMonitoringFinishingReportTemplate");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentLoadings.ReadModels.GarmentBalanceLoadingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<double>("CuttingQtyPcs");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("Hours");

                    b.Property<double>("LoadingQtyPcs");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Nominal");

                    b.Property<decimal>("Price");

                    b.Property<double>("QtyOrder");

                    b.Property<double>("RemainQty");

                    b.Property<string>("RoJob")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("Stock");

                    b.Property<string>("Style")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode");

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.ToTable("GarmentBalanceLoadings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentLoadings.ReadModels.GarmentLoadingItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("LoadingId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(500);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingDOItemId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("LoadingId");

                    b.ToTable("GarmentLoadingItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentLoadings.ReadModels.GarmentLoadingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(100);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("LoadingDate");

                    b.Property<string>("LoadingNo")
                        .HasMaxLength(25);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingDOId");

                    b.Property<string>("SewingDONo")
                        .HasMaxLength(25);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("LoadingNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentLoadings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentPreparings.ReadModels.GarmentPreparingItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("CustomsCategory");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("FabricType")
                        .HasMaxLength(100);

                    b.Property<Guid>("GarmentPreparingId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<string>("ROSource")
                        .HasMaxLength(100);

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UENItemId");

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("GarmentPreparingId");

                    b.ToTable("GarmentPreparingItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentPreparings.ReadModels.GarmentPreparingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(500);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(100);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsCuttingIn");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<DateTimeOffset?>("ProcessDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UENId");

                    b.Property<string>("UENNo")
                        .HasMaxLength(100);

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentPreparings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleAvalComponents.ReadModels.GarmentSampleAvalComponentItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<long>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SampleAvalComponentId");

                    b.Property<Guid>("SampleCuttingInDetailId");

                    b.Property<Guid>("SampleSewingOutDetailId");

                    b.Property<Guid>("SampleSewingOutItemId");

                    b.Property<long>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.HasKey("Identity");

                    b.HasIndex("SampleAvalComponentId");

                    b.ToTable("GarmentSampleAvalComponentItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleAvalComponents.ReadModels.GarmentSampleAvalComponentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<long>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsReceived");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SampleAvalComponentNo")
                        .HasMaxLength(25);

                    b.Property<string>("SampleAvalComponentType")
                        .HasMaxLength(25);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<long>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SampleAvalComponentNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleAvalComponents");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleAvalProducts.ReadModels.GarmentSampleAvalProductItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("APId");

                    b.Property<double>("BasicPrice");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsReceived");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SamplePreparingId");

                    b.Property<string>("SamplePreparingItemId");

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("APId");

                    b.ToTable("GarmentSampleAvalProductItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleAvalProducts.ReadModels.GarmentSampleAvalProductReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("AvalDate");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentSampleAvalProducts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingIns.ReadModels.GarmentSampleCuttingInDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutInItemId");

                    b.Property<int>("CuttingInQuantity");

                    b.Property<int>("CuttingInUomId");

                    b.Property<string>("CuttingInUomUnit")
                        .HasMaxLength(10);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<double>("FC");

                    b.Property<string>("FabricType")
                        .HasMaxLength(25);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("PreparingItemId");

                    b.Property<double>("PreparingQuantity");

                    b.Property<int>("PreparingUomId");

                    b.Property<string>("PreparingUomUnit")
                        .HasMaxLength(10);

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutDetailId");

                    b.Property<Guid>("SewingOutItemId");

                    b.HasKey("Identity");

                    b.HasIndex("CutInItemId");

                    b.ToTable("GarmentSampleCuttingInDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingIns.ReadModels.GarmentSampleCuttingInItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CutInId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("PreparingId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutId");

                    b.Property<string>("SewingOutNo")
                        .HasMaxLength(50);

                    b.Property<int>("UENId");

                    b.Property<string>("UENNo")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("CutInId");

                    b.ToTable("GarmentSampleCuttingInItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingIns.ReadModels.GarmentSampleCuttingInReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("CutInNo")
                        .HasMaxLength(25);

                    b.Property<string>("CuttingFrom")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("CuttingInDate");

                    b.Property<string>("CuttingType")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("FC");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("CutInNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleCuttingIns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingOuts.ReadModels.GarmentSampleCuttingOutDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingOutItemId");

                    b.Property<double>("CuttingOutQuantity");

                    b.Property<int>("CuttingOutUomId");

                    b.Property<string>("CuttingOutUomUnit")
                        .HasMaxLength(10);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("RemainingQuantity");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("CuttingOutItemId");

                    b.ToTable("GarmentSampleCuttingOutDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingOuts.ReadModels.GarmentSampleCuttingOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingInDetailId");

                    b.Property<Guid>("CuttingInId");

                    b.Property<Guid>("CuttingOutId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("TotalCuttingOut");

                    b.Property<string>("UId");

                    b.HasKey("Identity");

                    b.HasIndex("CuttingOutId");

                    b.ToTable("GarmentSampleCuttingOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingOuts.ReadModels.GarmentSampleCuttingOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("CutOutNo")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("CuttingOutDate");

                    b.Property<string>("CuttingOutType")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<long>("EPOId");

                    b.Property<long>("EPOItemId");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("POSerialNumber")
                        .HasMaxLength(100);

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("CutOutNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleCuttingOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleDeliveryReturns.ReadModels.GarmentSampleDeliveryReturnItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Box");

                    b.Property<string>("Colour");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DRId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("Level");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PreparingItemId");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<string>("Rack");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UENItemId");

                    b.Property<string>("UId");

                    b.Property<int>("UnitDOItemId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("DRId");

                    b.ToTable("GarmentSampleDeliveryReturnItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleDeliveryReturns.ReadModels.GarmentSampleDeliveryReturnReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("DRNo")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PreparingId");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("ReturnDate");

                    b.Property<string>("ReturnType")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("StorageCode")
                        .HasMaxLength(25);

                    b.Property<int>("StorageId");

                    b.Property<string>("StorageName")
                        .HasMaxLength(100);

                    b.Property<int>("UENId");

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitDOId");

                    b.Property<string>("UnitDONo")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("DRNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleDeliveryReturns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleExpenditureGoods.ReadModels.GarmentSampleExpenditureGoodItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("ExpenditureGoodId");

                    b.Property<Guid>("FinishedGoodStockId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.Property<double>("ReturQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("ExpenditureGoodId");

                    b.ToTable("GarmentSampleExpenditureGoodItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleExpenditureGoods.ReadModels.GarmentSampleExpenditureGoodReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100);

                    b.Property<double>("Carton");

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("ContractNo");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("ExpenditureDate");

                    b.Property<string>("ExpenditureGoodNo")
                        .HasMaxLength(25);

                    b.Property<string>("ExpenditureType")
                        .HasMaxLength(75);

                    b.Property<string>("Invoice")
                        .HasMaxLength(50);

                    b.Property<bool>("IsReceived");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("PackingListId");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("ExpenditureGoodNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleExpenditureGoods");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishedGoodStocks.ReadModels.GarmentSampleFinishedGoodStockHistoryReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdjustmentId");

                    b.Property<Guid>("AdjustmentItemId");

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<double>("BasicPrice");

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("ExpenditureGoodId");

                    b.Property<Guid>("ExpenditureGoodItemId");

                    b.Property<Guid>("ExpenditureGoodReturnId");

                    b.Property<Guid>("ExpenditureGoodReturnItemId");

                    b.Property<Guid>("FinishedGoodStockId");

                    b.Property<Guid>("FinishingOutDetailId");

                    b.Property<Guid>("FinishingOutItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("StockType")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentSampleFinishedGoodStockHistories");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishedGoodStocks.ReadModels.GarmentSampleFinishedGoodStockReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<double>("BasicPrice");

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("FinishedGoodStockNo")
                        .HasMaxLength(25);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("FinishedGoodStockNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleFinishedGoodStocks");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingIns.ReadModels.GarmentSampleFinishingInItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<long>("DODetailId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("FinishingInId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutDetailId");

                    b.Property<Guid>("SewingOutItemId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<Guid>("SubconCuttingId");

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingInId");

                    b.ToTable("GarmentSampleFinishingInItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingIns.ReadModels.GarmentSampleFinishingInReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<long>("DOId");

                    b.Property<string>("DONo")
                        .HasMaxLength(100);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("FinishingInDate");

                    b.Property<string>("FinishingInNo")
                        .HasMaxLength(25);

                    b.Property<string>("FinishingInType");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SubconType")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingInNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleFinishingIns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentMonitoringSampleFinishingReportReadModel", b =>
                {
                    b.Property<string>("RoJob")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25);

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("FinishingQtyPcs");

                    b.Property<Guid>("Identity");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("RemainQty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("SewingQtyPcs");

                    b.Property<double>("Stock");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("RoJob");

                    b.ToTable("GarmentMonitoringSampleFinishingReportTemplate");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentSampleFinishingOutDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("FinishingOutItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingOutItemId");

                    b.ToTable("GarmentSampleFinishingOutDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentSampleFinishingOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("FinishingInId");

                    b.Property<Guid>("FinishingInItemId");

                    b.Property<Guid>("FinishingOutId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingOutId");

                    b.ToTable("GarmentSampleFinishingOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentSampleFinishingOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("FinishingOutDate");

                    b.Property<string>("FinishingOutNo")
                        .HasMaxLength(25);

                    b.Property<string>("FinishingTo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDifferentSize");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<string>("UnitToCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitToId");

                    b.Property<string>("UnitToName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("FinishingOutNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleFinishingOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SamplePreparings.ReadModels.GarmentSamplePreparingItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("FabricType")
                        .HasMaxLength(100);

                    b.Property<Guid>("GarmentSamplePreparingId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<string>("ROSource")
                        .HasMaxLength(100);

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UENItemId");

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("GarmentSamplePreparingId");

                    b.ToTable("GarmentSamplePreparingItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SamplePreparings.ReadModels.GarmentSamplePreparingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(100);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsCuttingIn");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<DateTimeOffset?>("ProcessDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UENId");

                    b.Property<string>("UENNo")
                        .HasMaxLength(100);

                    b.Property<string>("UId")
                        .HasMaxLength(255);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentSamplePreparings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleRequests.ReadModels.GarmentSampleRequestProductReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Fabric")
                        .HasMaxLength(500);

                    b.Property<int>("Index");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SampleRequestId");

                    b.Property<string>("SizeDescription")
                        .HasMaxLength(500);

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("Style")
                        .HasMaxLength(255);

                    b.HasKey("Identity");

                    b.HasIndex("SampleRequestId");

                    b.ToTable("GarmentSampleRequestProducts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleRequests.ReadModels.GarmentSampleRequestReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attached")
                        .HasMaxLength(255);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(255);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DocumentsFileName")
                        .HasMaxLength(255);

                    b.Property<string>("DocumentsPath")
                        .HasMaxLength(1000);

                    b.Property<string>("ImagesName")
                        .HasMaxLength(255);

                    b.Property<string>("ImagesPath")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsPosted");

                    b.Property<bool>("IsReceived");

                    b.Property<bool>("IsRejected");

                    b.Property<bool>("IsRevised");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("POBuyer")
                        .HasMaxLength(255);

                    b.Property<string>("Packing")
                        .HasMaxLength(255);

                    b.Property<string>("RONoCC")
                        .HasMaxLength(15);

                    b.Property<string>("RONoSample")
                        .HasMaxLength(15);

                    b.Property<string>("ReceivedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("ReceivedDate");

                    b.Property<string>("RejectedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("RejectedDate");

                    b.Property<string>("RejectedReason");

                    b.Property<string>("Remark")
                        .HasMaxLength(4000);

                    b.Property<string>("RevisedBy")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("RevisedDate");

                    b.Property<string>("RevisedReason")
                        .HasMaxLength(1000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SampleCategory")
                        .HasMaxLength(50);

                    b.Property<string>("SampleRequestNo")
                        .HasMaxLength(30);

                    b.Property<string>("SampleTo")
                        .HasMaxLength(50);

                    b.Property<string>("SampleType")
                        .HasMaxLength(255);

                    b.Property<string>("SectionCode")
                        .HasMaxLength(25);

                    b.Property<int>("SectionId");

                    b.Property<DateTimeOffset>("SentDate");

                    b.HasKey("Identity");

                    b.HasIndex("RONoSample")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleRequests");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleRequests.ReadModels.GarmentSampleRequestSpecificationReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int>("Index");

                    b.Property<string>("Inventory")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SampleRequestId");

                    b.Property<string>("SpecificationDetail")
                        .HasMaxLength(500);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("SampleRequestId");

                    b.ToTable("GarmentSampleRequestSpecifications");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingIns.ReadModels.GarmentSampleSewingInItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingOutDetailId");

                    b.Property<Guid>("CuttingOutItemId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("FinishingOutDetailId");

                    b.Property<Guid>("FinishingOutItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingInId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("SewingInId");

                    b.ToTable("GarmentSampleSewingInItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingIns.ReadModels.GarmentSampleSewingInReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingOutId");

                    b.Property<string>("CuttingOutNo")
                        .HasMaxLength(25);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SewingFrom")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("SewingInDate");

                    b.Property<string>("SewingInNo")
                        .HasMaxLength(25);

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SewingInNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleSewingIns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingOuts.ReadModels.GarmentSampleSewingOutDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SampleSewingOutItemId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("SampleSewingOutItemId");

                    b.ToTable("GarmentSampleSewingOutDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingOuts.ReadModels.GarmentSampleSewingOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SampleSewingInId");

                    b.Property<Guid>("SampleSewingInItemId");

                    b.Property<Guid>("SampleSewingOutId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("SampleSewingOutId");

                    b.ToTable("GarmentSampleSewingOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingOuts.ReadModels.GarmentSampleSewingOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDifferentSize");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("SewingOutDate");

                    b.Property<string>("SewingOutNo")
                        .HasMaxLength(25);

                    b.Property<string>("SewingTo")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<string>("UnitToCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitToId");

                    b.Property<string>("UnitToName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SewingOutNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleSewingOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleStocks.ReadModels.GarmentSampleStockHistoryReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArchiveType")
                        .HasMaxLength(25);

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("ExpenditureGoodId");

                    b.Property<Guid>("ExpenditureGoodItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<string>("StockType")
                        .HasMaxLength(50);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentSampleStockHistories");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleStocks.ReadModels.GarmentSampleStockReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArchiveType")
                        .HasMaxLength(25);

                    b.Property<string>("Article")
                        .HasMaxLength(1000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SampleStockNo")
                        .HasMaxLength(25);

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(50);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SampleStockNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSampleStocks");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentScrapClassifications.ReadModels.GarmentScrapClassificationReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(25);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.ToTable("GarmentScrapClassifications");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentScrapDestinations.ReadModels.GarmentScrapDestinationReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(25);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.ToTable("GarmentScrapDestinations");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentScrapSources.ReadModels.GarmentScrapSourceReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(25);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UId")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.ToTable("GarmentScrapSources");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentScrapSources.ReadModels.GarmentScrapStockReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ScrapClassificationId");

                    b.Property<string>("ScrapClassificationName")
                        .HasMaxLength(100);

                    b.Property<Guid>("ScrapDestinationId");

                    b.Property<string>("ScrapDestinationName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.ToTable("GarmentScrapStocks");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentScrapSources.ReadModels.GarmentScrapTransactionItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ScrapClassificationId");

                    b.Property<string>("ScrapClassificationName")
                        .HasMaxLength(100);

                    b.Property<Guid>("ScrapTransactionId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("ScrapTransactionId");

                    b.ToTable("GarmentScrapTransactionItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentScrapSources.ReadModels.GarmentScrapTransactionReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ScrapDestinationId");

                    b.Property<string>("ScrapDestinationName")
                        .HasMaxLength(100);

                    b.Property<Guid>("ScrapSourceId");

                    b.Property<string>("ScrapSourceName")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("TransactionDate");

                    b.Property<string>("TransactionNo")
                        .HasMaxLength(25);

                    b.Property<string>("TransactionType")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.ToTable("GarmentScrapTransactions");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingDOs.ReadModels.GarmentSewingDOItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingOutDetailId");

                    b.Property<Guid>("CuttingOutItemId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingDOId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("SewingDOId");

                    b.ToTable("GarmentSewingDOItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingDOs.ReadModels.GarmentSewingDOReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingOutId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("SewingDODate");

                    b.Property<string>("SewingDONo")
                        .HasMaxLength(25);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SewingDONo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSewingDOs");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingIns.ReadModels.GarmentSewingInItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<Guid>("FinishingOutDetailId");

                    b.Property<Guid>("FinishingOutItemId");

                    b.Property<Guid>("LoadingItemId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingInId");

                    b.Property<Guid>("SewingOutDetailId");

                    b.Property<Guid>("SewingOutItemId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("SewingInId");

                    b.ToTable("GarmentSewingInItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingIns.ReadModels.GarmentSewingInReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("LoadingId");

                    b.Property<string>("LoadingNo");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SewingFrom")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("SewingInDate");

                    b.Property<string>("SewingInNo")
                        .HasMaxLength(25);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitFromId");

                    b.Property<string>("UnitFromName")
                        .HasMaxLength(100);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SewingInNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSewingIns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingIns.ReadModels.SewingInHomeListViewReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Products");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SewingFrom")
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("SewingInDate");

                    b.Property<string>("SewingInNo")
                        .HasMaxLength(25);

                    b.Property<double>("TotalQuantity");

                    b.Property<double>("TotalRemainingQuantity");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<string>("UnitFromCode")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.ToTable("SewingInHomeListView");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentBalanceSewingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("Hours");

                    b.Property<double>("LoadingQtyPcs");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Nominal");

                    b.Property<decimal>("Price");

                    b.Property<double>("QtyOrder");

                    b.Property<double>("RemainQty");

                    b.Property<string>("RoJob")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("SewingOutQtyPcs");

                    b.Property<double>("Stock");

                    b.Property<string>("Style")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode");

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.ToTable("GarmentBalanceSewings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentSewingOutDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingOutItemId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("SewingOutItemId");

                    b.ToTable("GarmentSewingOutDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentSewingOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("Color");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<double>("RemainingQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SewingInId");

                    b.Property<Guid>("SewingInItemId");

                    b.Property<Guid>("SewingOutId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("SewingOutId");

                    b.ToTable("GarmentSewingOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentSewingOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(5000);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDifferentSize");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("SewingOutDate");

                    b.Property<string>("SewingOutNo")
                        .HasMaxLength(25);

                    b.Property<string>("SewingTo")
                        .HasMaxLength(100);

                    b.Property<string>("UId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<string>("UnitToCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitToId");

                    b.Property<string>("UnitToName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SewingOutNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSewingOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.CustomsOuts.ReadModels.GarmentSubconCustomsOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SubconCustomsOutId");

                    b.Property<Guid>("SubconDLOutId");

                    b.Property<string>("SubconDLOutNo")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("SubconCustomsOutId");

                    b.ToTable("GarmentSubconCustomsOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.CustomsOuts.ReadModels.GarmentSubconCustomsOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("CustomsOutDate");

                    b.Property<string>("CustomsOutNo")
                        .HasMaxLength(25);

                    b.Property<string>("CustomsOutType")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(4000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SubconCategory")
                        .HasMaxLength(100);

                    b.Property<Guid>("SubconContractId");

                    b.Property<string>("SubconContractNo")
                        .HasMaxLength(25);

                    b.Property<string>("SubconType")
                        .HasMaxLength(50);

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(25);

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("CustomsOutNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSubconCustomsOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.InvoicePackingList.ReadModels.SubconInvoicePackingListItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CIF");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("DLDate");

                    b.Property<string>("DLNo")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(255);

                    b.Property<Guid>("InvoicePackingListId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<string>("ProductRemark")
                        .HasMaxLength(255);

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("TotalPrice");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("InvoicePackingListId");

                    b.ToTable("SubconInvoicePackingListItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.InvoicePackingList.ReadModels.SubconInvoicePackingListReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BCType")
                        .HasMaxLength(25);

                    b.Property<string>("ContractNo")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("GW");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("NW");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(255);

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(50);

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("InvoiceNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("SubconInvoicePackingList");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconCuttingItemId");

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconCuttingItemId");

                    b.ToTable("GarmentServiceSubconCuttingDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(50);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(255);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconCuttingId");

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconCuttingId");

                    b.ToTable("GarmentServiceSubconCuttingItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuyerCode");

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("QtyPacking");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("SubconDate");

                    b.Property<string>("SubconNo")
                        .HasMaxLength(25);

                    b.Property<string>("SubconType");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit");

                    b.HasKey("Identity");

                    b.HasIndex("SubconNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentServiceSubconCuttings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingSizeReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CuttingInDetailId");

                    b.Property<Guid>("CuttingInId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconCuttingDetailId");

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconCuttingDetailId");

                    b.ToTable("GarmentServiceSubconCuttingSizes");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconFabricWashes.ReadModels.GarmentServiceSubconFabricWashDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<string>("ProductRemark")
                        .HasMaxLength(1000);

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconFabricWashItemId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconFabricWashItemId");

                    b.ToTable("GarmentServiceSubconFabricWashDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconFabricWashes.ReadModels.GarmentServiceSubconFabricWashItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("ExpenditureDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconFabricWashId");

                    b.Property<string>("UnitExpenditureNo")
                        .HasMaxLength(25);

                    b.Property<string>("UnitRequestCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitRequestId");

                    b.Property<string>("UnitRequestName")
                        .HasMaxLength(100);

                    b.Property<string>("UnitSenderCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitSenderId");

                    b.Property<string>("UnitSenderName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconFabricWashId");

                    b.ToTable("GarmentServiceSubconFabricWashItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconFabricWashes.ReadModels.GarmentServiceSubconFabricWashReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("QtyPacking");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("ServiceSubconFabricWashDate");

                    b.Property<string>("ServiceSubconFabricWashNo")
                        .HasMaxLength(25);

                    b.Property<string>("UomUnit");

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconFabricWashNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentServiceSubconFabricWashes");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconSewings.ReadModels.GarmentServiceSubconSewingDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconSewingItemId");

                    b.Property<Guid>("SewingInId");

                    b.Property<Guid>("SewingInItemId");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(25);

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconSewingItemId");

                    b.ToTable("GarmentServiceSubconSewingDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconSewings.ReadModels.GarmentServiceSubconSewingItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(50);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100);

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconSewingId");

                    b.Property<string>("UnitCode");

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName");

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconSewingId");

                    b.ToTable("GarmentServiceSubconSewingItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconSewings.ReadModels.GarmentServiceSubconSewingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuyerCode");

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("QtyPacking");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("ServiceSubconSewingDate");

                    b.Property<string>("ServiceSubconSewingNo")
                        .HasMaxLength(25);

                    b.Property<string>("UomUnit");

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconSewingNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentServiceSubconSewings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconShrinkagePanels.ReadModels.GarmentServiceSubconShrinkagePanelDetailReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<string>("ProductRemark")
                        .HasMaxLength(1000);

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconShrinkagePanelItemId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconShrinkagePanelItemId");

                    b.ToTable("GarmentServiceSubconShrinkagePanelDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconShrinkagePanels.ReadModels.GarmentServiceSubconShrinkagePanelItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("ExpenditureDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ServiceSubconShrinkagePanelId");

                    b.Property<string>("UnitExpenditureNo")
                        .HasMaxLength(25);

                    b.Property<string>("UnitRequestCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitRequestId");

                    b.Property<string>("UnitRequestName")
                        .HasMaxLength(100);

                    b.Property<string>("UnitSenderCode")
                        .HasMaxLength(25);

                    b.Property<int>("UnitSenderId");

                    b.Property<string>("UnitSenderName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconShrinkagePanelId");

                    b.ToTable("GarmentServiceSubconShrinkagePanelItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconShrinkagePanels.ReadModels.GarmentServiceSubconShrinkagePanelReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("QtyPacking");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("ServiceSubconShrinkagePanelDate");

                    b.Property<string>("ServiceSubconShrinkagePanelNo")
                        .HasMaxLength(25);

                    b.Property<string>("UomUnit");

                    b.HasKey("Identity");

                    b.HasIndex("ServiceSubconShrinkagePanelNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentServiceSubconShrinkagePanels");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconContracts.ReadModels.GarmentSubconContractItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CIFItem");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SubconContractId");

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("SubconContractId");

                    b.ToTable("GarmentSubconContractItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconContracts.ReadModels.GarmentSubconContractReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("AgreementDate");

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(50);

                    b.Property<string>("BPJNo")
                        .HasMaxLength(50);

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(25);

                    b.Property<int>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(255);

                    b.Property<int>("CIF");

                    b.Property<DateTimeOffset>("ContractDate");

                    b.Property<string>("ContractNo")
                        .HasMaxLength(50);

                    b.Property<string>("ContractType")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("DueDate");

                    b.Property<string>("FinishedGoodType")
                        .HasMaxLength(50);

                    b.Property<bool>("IsUsed");

                    b.Property<string>("JobType")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SKEPNo")
                        .HasMaxLength(50);

                    b.Property<string>("SubconCategory")
                        .HasMaxLength(50);

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(25);

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(255);

                    b.Property<int>("UomId");

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("ContractNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSubconContracts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconCustomsIns.ReadModels.GarmentSubconCustomsInItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int>("DoId");

                    b.Property<string>("DoNo")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SubconCustomsInId");

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(25);

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("SubconCustomsInId");

                    b.ToTable("GarmentServiceSubconCustomsInItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconCustomsIns.ReadModels.GarmentSubconCustomsInReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("BcDate");

                    b.Property<string>("BcNo")
                        .HasMaxLength(255);

                    b.Property<string>("BcType")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SubconCategory");

                    b.Property<Guid>("SubconContractId");

                    b.Property<string>("SubconContractNo")
                        .HasMaxLength(100);

                    b.Property<string>("SubconType")
                        .HasMaxLength(255);

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(25);

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.HasIndex("BcNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSubconCustomsIns");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconDeliveryLetterOuts.ReadModels.GarmentSubconDeliveryLetterOutItemReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<string>("FabricType")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("POSerialNumber")
                        .HasMaxLength(50);

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<string>("ProductRemark")
                        .HasMaxLength(2000);

                    b.Property<int>("QtyPacking");

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SubconDeliveryLetterOutId");

                    b.Property<Guid>("SubconId");

                    b.Property<string>("SubconNo")
                        .HasMaxLength(50);

                    b.Property<int>("UENItemId");

                    b.Property<int>("UomId");

                    b.Property<int>("UomOutId");

                    b.Property<string>("UomOutUnit")
                        .HasMaxLength(50);

                    b.Property<string>("UomSatuanUnit")
                        .HasMaxLength(10);

                    b.Property<string>("UomUnit")
                        .HasMaxLength(50);

                    b.HasKey("Identity");

                    b.HasIndex("SubconDeliveryLetterOutId");

                    b.ToTable("GarmentSubconDeliveryLetterOutItems");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconDeliveryLetterOuts.ReadModels.GarmentSubconDeliveryLetterOutReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContractType")
                        .HasMaxLength(25);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("DLDate");

                    b.Property<string>("DLNo")
                        .HasMaxLength(25);

                    b.Property<string>("DLType");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int>("EPOId");

                    b.Property<int>("EPOItemId");

                    b.Property<string>("EPONo")
                        .HasMaxLength(50);

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PONo")
                        .HasMaxLength(25);

                    b.Property<int>("QtyPacking");

                    b.Property<string>("Remark")
                        .HasMaxLength(4000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50);

                    b.Property<string>("SubconCategory")
                        .HasMaxLength(50);

                    b.Property<int>("UENId");

                    b.Property<string>("UENNo")
                        .HasMaxLength(25);

                    b.Property<string>("UomUnit")
                        .HasMaxLength(10);

                    b.HasKey("Identity");

                    b.HasIndex("DLNo")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSubconDeliveryLetterOuts");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubconCuttingOuts.ReadModels.GarmentSubconCuttingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicPrice");

                    b.Property<string>("ComodityCode")
                        .HasMaxLength(25);

                    b.Property<int>("ComodityId");

                    b.Property<string>("ComodityName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("DesignColor")
                        .HasMaxLength(2000);

                    b.Property<double>("FinishingInQuantity");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<double>("Quantity");

                    b.Property<string>("RONo")
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SizeId");

                    b.Property<string>("SizeName")
                        .HasMaxLength(100);

                    b.HasKey("Identity");

                    b.ToTable("GarmentSubconCuttings");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubconCuttingOuts.ReadModels.GarmentSubconCuttingRelationReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("GarmentCuttingOutDetailId");

                    b.Property<Guid>("GarmentSubconCuttingId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.HasIndex("GarmentCuttingOutDetailId")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.HasIndex("GarmentCuttingOutDetailId", "GarmentSubconCuttingId")
                        .IsUnique()
                        .HasFilter("[Deleted]=(0)");

                    b.ToTable("GarmentSubconCuttingRelations");
                });

            modelBuilder.Entity("Manufactures.Domain.MonitoringProductionStockFlow.GarmentBalanceMonitoringProductionStockReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article")
                        .HasMaxLength(100);

                    b.Property<double>("BasicPrice");

                    b.Property<double>("BeginingBalanceCuttingPrice");

                    b.Property<double>("BeginingBalanceCuttingQty");

                    b.Property<double>("BeginingBalanceExpenditureGood");

                    b.Property<double>("BeginingBalanceExpenditureGoodPrice");

                    b.Property<double>("BeginingBalanceFinishingPrice");

                    b.Property<double>("BeginingBalanceFinishingQty");

                    b.Property<double>("BeginingBalanceLoadingPrice");

                    b.Property<double>("BeginingBalanceLoadingQty");

                    b.Property<double>("BeginingBalanceSewingPrice");

                    b.Property<double>("BeginingBalanceSewingQty");

                    b.Property<double>("BeginingBalanceSubconPrice");

                    b.Property<double>("BeginingBalanceSubconQty");

                    b.Property<string>("BuyerCode")
                        .HasMaxLength(50);

                    b.Property<string>("Comodity")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("FC");

                    b.Property<decimal>("Fare");

                    b.Property<double>("Hours");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("QtyOrder");

                    b.Property<string>("Ro")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UnitCode");

                    b.Property<int>("UnitId");

                    b.Property<string>("UnitName");

                    b.HasKey("Identity");

                    b.ToTable("GarmentBalanceProductionStocks");
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAdjustments.ReadModels.GarmentAdjustmentItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentAdjustments.ReadModels.GarmentAdjustmentReadModel", "GarmentAdjustment")
                        .WithMany("Items")
                        .HasForeignKey("AdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAvalComponents.ReadModels.GarmentAvalComponentItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentAvalComponents.ReadModels.GarmentAvalComponentReadModel", "GarmentAvalComponent")
                        .WithMany("Items")
                        .HasForeignKey("AvalComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentAvalProducts.ReadModels.GarmentAvalProductItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentAvalProducts.ReadModels.GarmentAvalProductReadModel", "GarmentAvalProductIdentity")
                        .WithMany("GarmentAvalProductItem")
                        .HasForeignKey("APId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingAdjustments.ReadModels.GarmentCuttingAdjustmentItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentCuttingAdjustments.ReadModels.GarmentCuttingAdjustmentReadModel", "GarmentAdjustmentCutting")
                        .WithMany("Items")
                        .HasForeignKey("AdjustmentCuttingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingIns.ReadModels.GarmentCuttingInDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentCuttingIns.ReadModels.GarmentCuttingInItemReadModel", "GarmentCuttingInItem")
                        .WithMany("Details")
                        .HasForeignKey("CutInItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingIns.ReadModels.GarmentCuttingInItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentCuttingIns.ReadModels.GarmentCuttingInReadModel", "GarmentCuttingIn")
                        .WithMany("Items")
                        .HasForeignKey("CutInId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentCuttingOutDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentCuttingOutItemReadModel", "GarmentCuttingOutItemIdentity")
                        .WithMany("GarmentCuttingOutDetail")
                        .HasForeignKey("CutOutItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentCuttingOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentCuttingOuts.ReadModels.GarmentCuttingOutReadModel", "GarmentCuttingOutIdentity")
                        .WithMany("GarmentCuttingOutItem")
                        .HasForeignKey("CutOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentDeliveryReturns.ReadModels.GarmentDeliveryReturnItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentDeliveryReturns.ReadModels.GarmentDeliveryReturnReadModel", "GarmentDeliveryReturnIdentity")
                        .WithMany("GarmentDeliveryReturnItem")
                        .HasForeignKey("DRId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentExpenditureGoodReturns.ReadModels.GarmentExpenditureGoodReturnItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentExpenditureGoodReturns.ReadModels.GarmentExpenditureGoodReturnReadModel", "GarmentExpenditureGoodReturn")
                        .WithMany("Items")
                        .HasForeignKey("ReturId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentExpenditureGoods.ReadModels.GarmentExpenditureGoodItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentExpenditureGoods.ReadModels.GarmentExpenditureGoodReadModel", "GarmentExpenditureGood")
                        .WithMany("Items")
                        .HasForeignKey("ExpenditureGoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingIns.ReadModels.GarmentFinishingInItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentFinishingIns.ReadModels.GarmentFinishingInReadModel", "GarmentFinishingIn")
                        .WithMany("Items")
                        .HasForeignKey("FinishingInId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentFinishingOutDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentFinishingOutItemReadModel", "GarmentFinishingOutItemIdentity")
                        .WithMany("GarmentFinishingOutDetail")
                        .HasForeignKey("FinishingOutItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentFinishingOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentFinishingOuts.ReadModels.GarmentFinishingOutReadModel", "GarmentFinishingOutIdentity")
                        .WithMany("GarmentFinishingOutItem")
                        .HasForeignKey("FinishingOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentLoadings.ReadModels.GarmentLoadingItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentLoadings.ReadModels.GarmentLoadingReadModel", "GarmentLoading")
                        .WithMany("Items")
                        .HasForeignKey("LoadingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentPreparings.ReadModels.GarmentPreparingItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentPreparings.ReadModels.GarmentPreparingReadModel", "GarmentPreparingIdentity")
                        .WithMany("GarmentPreparingItem")
                        .HasForeignKey("GarmentPreparingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleAvalComponents.ReadModels.GarmentSampleAvalComponentItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleAvalComponents.ReadModels.GarmentSampleAvalComponentReadModel", "GarmentSampleAvalComponent")
                        .WithMany("Items")
                        .HasForeignKey("SampleAvalComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleAvalProducts.ReadModels.GarmentSampleAvalProductItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleAvalProducts.ReadModels.GarmentSampleAvalProductReadModel", "GarmentSampleAvalProductIdentity")
                        .WithMany("GarmentSampleAvalProductItem")
                        .HasForeignKey("APId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingIns.ReadModels.GarmentSampleCuttingInDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleCuttingIns.ReadModels.GarmentSampleCuttingInItemReadModel", "GarmentSampleCuttingInItem")
                        .WithMany("Details")
                        .HasForeignKey("CutInItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingIns.ReadModels.GarmentSampleCuttingInItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleCuttingIns.ReadModels.GarmentSampleCuttingInReadModel", "GarmentSampleCuttingIn")
                        .WithMany("Items")
                        .HasForeignKey("CutInId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingOuts.ReadModels.GarmentSampleCuttingOutDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleCuttingOuts.ReadModels.GarmentSampleCuttingOutItemReadModel", "GarmentSampleCuttingOutItemIdentity")
                        .WithMany("GarmentSampleCuttingOutDetail")
                        .HasForeignKey("CuttingOutItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleCuttingOuts.ReadModels.GarmentSampleCuttingOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleCuttingOuts.ReadModels.GarmentSampleCuttingOutReadModel", "GarmentSampleCuttingOutIdentity")
                        .WithMany("GarmentSampleCuttingOutItem")
                        .HasForeignKey("CuttingOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleDeliveryReturns.ReadModels.GarmentSampleDeliveryReturnItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleDeliveryReturns.ReadModels.GarmentSampleDeliveryReturnReadModel", "GarmentSampleDeliveryReturnIdentity")
                        .WithMany("GarmentSampleDeliveryReturnItem")
                        .HasForeignKey("DRId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleExpenditureGoods.ReadModels.GarmentSampleExpenditureGoodItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleExpenditureGoods.ReadModels.GarmentSampleExpenditureGoodReadModel", "GarmentSampleExpenditureGood")
                        .WithMany("Items")
                        .HasForeignKey("ExpenditureGoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingIns.ReadModels.GarmentSampleFinishingInItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleFinishingIns.ReadModels.GarmentSampleFinishingInReadModel", "GarmentSampleFinishingIn")
                        .WithMany("Items")
                        .HasForeignKey("FinishingInId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentSampleFinishingOutDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentSampleFinishingOutItemReadModel", "GarmentSampleFinishingOutItemIdentity")
                        .WithMany("GarmentSampleFinishingOutDetail")
                        .HasForeignKey("FinishingOutItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentSampleFinishingOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleFinishingOuts.ReadModels.GarmentSampleFinishingOutReadModel", "GarmentSampleFinishingOutIdentity")
                        .WithMany("GarmentSampleFinishingOutItem")
                        .HasForeignKey("FinishingOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SamplePreparings.ReadModels.GarmentSamplePreparingItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SamplePreparings.ReadModels.GarmentSamplePreparingReadModel", "GarmentSamplePreparingIdentity")
                        .WithMany("GarmentSamplePreparingItem")
                        .HasForeignKey("GarmentSamplePreparingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleRequests.ReadModels.GarmentSampleRequestProductReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleRequests.ReadModels.GarmentSampleRequestReadModel", "GarmentSampleRequest")
                        .WithMany("SampleProduct")
                        .HasForeignKey("SampleRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleRequests.ReadModels.GarmentSampleRequestSpecificationReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleRequests.ReadModels.GarmentSampleRequestReadModel", "GarmentSampleRequest")
                        .WithMany("SampleSpecification")
                        .HasForeignKey("SampleRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingIns.ReadModels.GarmentSampleSewingInItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleSewingIns.ReadModels.GarmentSampleSewingInReadModel", "GarmentSampleSewingInIdentity")
                        .WithMany("GarmentSampleSewingInItem")
                        .HasForeignKey("SewingInId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingOuts.ReadModels.GarmentSampleSewingOutDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleSewingOuts.ReadModels.GarmentSampleSewingOutItemReadModel", "GarmentSampleSewingOutItemIdentity")
                        .WithMany("GarmentSampleSewingOutDetail")
                        .HasForeignKey("SampleSewingOutItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSample.SampleSewingOuts.ReadModels.GarmentSampleSewingOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSample.SampleSewingOuts.ReadModels.GarmentSampleSewingOutReadModel", "GarmentSampleSewingOutIdentity")
                        .WithMany("GarmentSewingOutItem")
                        .HasForeignKey("SampleSewingOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentScrapSources.ReadModels.GarmentScrapTransactionItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentScrapSources.ReadModels.GarmentScrapTransactionReadModel", "GarmentScrapTransactionIdentity")
                        .WithMany("GarmentScrapTransactionItem")
                        .HasForeignKey("ScrapTransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingDOs.ReadModels.GarmentSewingDOItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSewingDOs.ReadModels.GarmentSewingDOReadModel", "GarmentSewingDOIdentity")
                        .WithMany("GarmentSewingDOItem")
                        .HasForeignKey("SewingDOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingIns.ReadModels.GarmentSewingInItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSewingIns.ReadModels.GarmentSewingInReadModel", "GarmentSewingInIdentity")
                        .WithMany("GarmentSewingInItem")
                        .HasForeignKey("SewingInId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentSewingOutDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentSewingOutItemReadModel", "GarmentSewingOutItemIdentity")
                        .WithMany("GarmentSewingOutDetail")
                        .HasForeignKey("SewingOutItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentSewingOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSewingOuts.ReadModels.GarmentSewingOutReadModel", "GarmentSewingOutIdentity")
                        .WithMany("GarmentSewingOutItem")
                        .HasForeignKey("SewingOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.CustomsOuts.ReadModels.GarmentSubconCustomsOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.CustomsOuts.ReadModels.GarmentSubconCustomsOutReadModel", "GarmentSubconCustomsOut")
                        .WithMany("GarmentSubconCustomsOutItem")
                        .HasForeignKey("SubconCustomsOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.InvoicePackingList.ReadModels.SubconInvoicePackingListItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.InvoicePackingList.ReadModels.SubconInvoicePackingListReadModel", "SubconInvoicePacking")
                        .WithMany("SubconInvoicePackingListItem")
                        .HasForeignKey("InvoicePackingListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingItemReadModel", "GarmentServiceSubconCuttingItem")
                        .WithMany("GarmentServiceSubconCuttingDetail")
                        .HasForeignKey("ServiceSubconCuttingItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingReadModel", "GarmentServiceSubconCutting")
                        .WithMany("GarmentServiceSubconCuttingItem")
                        .HasForeignKey("ServiceSubconCuttingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingSizeReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconCuttings.ReadModels.GarmentServiceSubconCuttingDetailReadModel", "GarmentServiceSubconCuttingDetail")
                        .WithMany("GarmentServiceSubconCuttingSizes")
                        .HasForeignKey("ServiceSubconCuttingDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconFabricWashes.ReadModels.GarmentServiceSubconFabricWashDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconFabricWashes.ReadModels.GarmentServiceSubconFabricWashItemReadModel", "GarmentServiceSubconFabricWashItemIdentity")
                        .WithMany("GarmentServiceSubconFabricWashDetail")
                        .HasForeignKey("ServiceSubconFabricWashItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconFabricWashes.ReadModels.GarmentServiceSubconFabricWashItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconFabricWashes.ReadModels.GarmentServiceSubconFabricWashReadModel", "GarmentServiceSubconFabricWashIdentity")
                        .WithMany("GarmentServiceSubconFabricWashItem")
                        .HasForeignKey("ServiceSubconFabricWashId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconSewings.ReadModels.GarmentServiceSubconSewingDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconSewings.ReadModels.GarmentServiceSubconSewingItemReadModel", "GarmentServiceSubconSewingItemIdentity")
                        .WithMany("GarmentServiceSubconSewingDetail")
                        .HasForeignKey("ServiceSubconSewingItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconSewings.ReadModels.GarmentServiceSubconSewingItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconSewings.ReadModels.GarmentServiceSubconSewingReadModel", "GarmentServiceSubconSewingIdentity")
                        .WithMany("GarmentServiceSubconSewingItem")
                        .HasForeignKey("ServiceSubconSewingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconShrinkagePanels.ReadModels.GarmentServiceSubconShrinkagePanelDetailReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconShrinkagePanels.ReadModels.GarmentServiceSubconShrinkagePanelItemReadModel", "GarmentServiceSubconShrinkagePanelItemIdentity")
                        .WithMany("GarmentServiceSubconShrinkagePanelDetail")
                        .HasForeignKey("ServiceSubconShrinkagePanelItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.ServiceSubconShrinkagePanels.ReadModels.GarmentServiceSubconShrinkagePanelItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.ServiceSubconShrinkagePanels.ReadModels.GarmentServiceSubconShrinkagePanelReadModel", "GarmentServiceSubconShrinkagePanelIdentity")
                        .WithMany("GarmentServiceSubconShrinkagePanelItem")
                        .HasForeignKey("ServiceSubconShrinkagePanelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconContracts.ReadModels.GarmentSubconContractItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.SubconContracts.ReadModels.GarmentSubconContractReadModel", "GarmentSubconContract")
                        .WithMany("GarmentSubconContractItem")
                        .HasForeignKey("SubconContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconCustomsIns.ReadModels.GarmentSubconCustomsInItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.SubconCustomsIns.ReadModels.GarmentSubconCustomsInReadModel", "GarmentSubconCustomsIn")
                        .WithMany("GarmentSubconCustomsInItem")
                        .HasForeignKey("SubconCustomsInId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.GarmentSubcon.SubconDeliveryLetterOuts.ReadModels.GarmentSubconDeliveryLetterOutItemReadModel", b =>
                {
                    b.HasOne("Manufactures.Domain.GarmentSubcon.SubconDeliveryLetterOuts.ReadModels.GarmentSubconDeliveryLetterOutReadModel", "GarmentSubconDeliveryLetterOut")
                        .WithMany("GarmentSubconDeliveryLetterOutItem")
                        .HasForeignKey("SubconDeliveryLetterOutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
